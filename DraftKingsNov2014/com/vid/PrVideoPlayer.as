package com.vid {	import pointroll.initAd;	import pointroll.getFlashVar;	import pointroll.trackActivity;	import pointroll.info.getVideoDeliveryMethod				import com.pointroll.api.events.PrVideoEvent;	import com.pointroll.api.events.PrProgressEvent;	import com.pointroll.api.media.PointrollVideo;	import com.pointroll.api.media.definition.PointRollBasicVideoDefinition;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.media.Video;	import flash.utils.setTimeout;	import flash.utils.clearTimeout;	import flash.geom.Rectangle;	import com.vid.LoadingIcon		import pointroll.trackActivity;	import com.pointroll.api.media.definition.PointRollAdvancedVideoDefinition;	import com.pointroll.api.media.definition.PointRollBasicVideoDefinition;	public class PrVideoPlayer extends MovieClip {		public static const CONTROL_INTERACTION:String = 'controlInteraction';		public static const VIDEO_START:String = 'videoStart';		public static const VIDEO_END:String = 'videoEnd';				public var prVideo:PointrollVideo;		public var muted:Boolean = true;		public var vidNameArray:Array = new Array();		public var adFolder:String;		public var prAudioUI:int;		public var prVideoUI:int;					public var vidIndex:int = 0;		public var vidCount:int = 0;						private var loading_mc:LoadingIcon;		private var hasControls:Boolean;		public var videoObject:Video;		private var scrub:Boolean = false;		private var videoLaunched:Boolean = false;		private var videoComplete:Boolean = false;		private var videoPlaying:Boolean = false;		private var cycleVids:Boolean;		private var politeVid:Boolean;		private var politeTimeout:Number;		private var firstVideo:Boolean = true;		private var bg_mc:Sprite = new Sprite();		private var videoWidth:uint;		private var videoHeight:uint;		private var prVideoArray:Array = new Array();		private var milestoneArray:Array;		private var milestoneHandler:Function;		private var playedPct;		public var click_mc:Sprite = new Sprite()				public function PrVideoPlayer(main, playerWidth:int, playerHeight:int, vidWidth:int, vidHeight:int, _adFolder:String, _vidNames:Array, _hasControls:Boolean = false, _politeVid:Boolean = false, _cycleVids:Boolean = false):void{			pointroll.initAd(main);			adFolder = (pointroll.getFlashVar('adFolder'))? pointroll.getFlashVar('adFolder') : _adFolder;			trace("\n adFolder: " + adFolder)			videoHeight = (pointroll.getFlashVar('vidHeight'))? int(pointroll.getFlashVar('vidHeight')) : vidHeight			videoWidth = (pointroll.getFlashVar('vidWidth'))? int(pointroll.getFlashVar('vidWidth')) : vidWidth			vidNameArray = (pointroll.getFlashVar('vidNames'))? pointroll.getFlashVar('vidNames').split('|') : _vidNames						for(var i:uint = 0; i < vidNameArray.length; i ++){				var vidName:String = (i < vidNameArray.length - 1)? vidNameArray[i] : vidNameArray[vidNameArray.length-1]				//prVideoArray.push(new PointRollAdvancedVideoDefinition(adFolder, i+1, vidName));				prVideoArray.push(new PointRollBasicVideoDefinition(adFolder, vidName, i+1))			}						videoObject = new Video(videoWidth, videoHeight);			vidCount = vidNameArray.length;			cycleVids = (vidCount == 1)? false : _cycleVids;			politeVid = _politeVid;			hasControls = _hasControls;			loading_mc = new LoadingIcon(10, 0xffffff)			addChild(loading_mc);						setPlayerDimensions(playerWidth, playerHeight)															prAudioUI = (pointroll.getFlashVar('prAudioUI'))? int(pointroll.getFlashVar('prAudioUI')) : 0;			prVideoUI = (pointroll.getFlashVar('prVideoUI'))? int(pointroll.getFlashVar('prVideoUI')) : 1;												addEventListener(Event.ADDED_TO_STAGE, init);		}				public function init(e:Event):void{			removeEventListener(Event.ADDED_TO_STAGE, init);						loading_mc.animStop()						if(hasControls){				this['prog_mc'].mouseEnabled = false;				this['replayRestart_mc'].buttonMode  = this['sound_mc'].buttonMode = this['playToggle_mc'].buttonMode = this['volToggle_mc'].buttonMode = this['replayRestart_mc'].buttonMode = true;				this['replayRestart_mc'].visible = this['playToggle_mc'].pause_mc.visible = false;				this['replayRestart_mc'].mouseChildren = this['playToggle_mc'].mouseChildren = this['volToggle_mc'].mouseChildren = false;//								this['prog_mc'].graphics.beginFill(0x646464)				this['prog_mc'].graphics.drawRect(0,0,videoWidth,8)				this['progBG_mc'].graphics.beginFill(0x646464)				this['progBG_mc'].graphics.drawRect(0,0,videoWidth,8)				this['controlBG_mc'].width = videoWidth;				this['controlBar_mc'].width = videoWidth - this['playToggle_mc'].width - this['volToggle_mc'].width;				this['prog_mc'].y = this['progBG_mc'].y = videoHeight - this['prog_mc'].height;				this['scrub_mc'].y = this['prog_mc'].y-4				this['controlBG_mc'].y = this['playToggle_mc'].y = this['volToggle_mc'].y = this['controlBar_mc'].y = videoHeight - this['playToggle_mc'].height;				this['timer_txt'].y = this['controlBar_mc'].y + 6				this['timer_txt'].x = this['controlBG_mc'].width - this['timer_txt'].width + 5				this['replayRestart_mc'].y = this['sound_mc'].y = loading_mc.y				this['replayRestart_mc'].x = this['sound_mc'].x = loading_mc.x								addEventListener(MouseEvent.MOUSE_OVER, overOutHandler)				addEventListener(MouseEvent.MOUSE_OUT, overOutHandler)				dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));				addEventListener(MouseEvent.CLICK, clickHandler);			}						//addChildAt(videoObject, 0);			//addChildAt(videoObject, getChildByName('bg_mc')+1);			addChildAt(videoObject, 1);						addChildAt(click_mc, getChildIndex(videoObject))			click_mc.buttonMode = true;			click_mc.name = 'click_mc'						if(prVideoUI != 1)launchVideo(0);					}				private function overOutHandler(e:MouseEvent):void{			var TorF:Boolean = (e.type == MouseEvent.MOUSE_OVER)			this['controlBG_mc'].visible = this['timer_txt'].visible = this['scrub_mc'].visible = this['controlBar_mc'].visible = this['playToggle_mc'].visible = this['volToggle_mc'].visible = TorF			this['prog_mc'].height = this['progBG_mc'].height = (TorF)? 8 : 4			this['prog_mc'].y = this['progBG_mc'].y = (TorF)? videoHeight - this['prog_mc'].height - this['playToggle_mc'].height : videoHeight - this['prog_mc'].height;			this['scrub_mc'].y = this['prog_mc'].y-4		}				private function clickHandler(e:MouseEvent):void{			dispatchEvent(new Event(CONTROL_INTERACTION))			switch(e.target.name){				case 'volToggle_mc':				case 'unmute_mc':				case 'mute_mc':				case 'sound_mc':					toggleVolume()					break;				case 'pause_mc':				case 'play_mc':				case 'playToggle_mc':				case 'replayRestart_mc':				case 'replayRestart_mc':					togglePlaying();					break;			}		}				public function seekTime(n:Number):void{			if(videoLaunched)prVideo.seek(n)		}		public function launchVideo(i:int = 0):void {			politeVid = (politeVid)? (i == 0) : false						kill();			prVideo = new PointrollVideo(videoObject, pointroll.info.getVideoDeliveryMethod());			prVideo.progressTracker.addEventListener(PrProgressEvent.MEDIA_START, videoStartHandler);			prVideo.progressTracker.addEventListener(PrProgressEvent.MEDIA_COMPLETE, videoCompleteHandler);			prVideo.progressTracker.addEventListener(PrProgressEvent.MEDIA_PROGRESS, videoProgressHandler);			prVideo.addEventListener(PrVideoEvent.REPLAY, replayRestartHandler)			prVideo.addEventListener(PrVideoEvent.RESTART, replayRestartHandler)			addMilestones(milestoneArray, milestoneHandler)			prVideo.progressTrackingEnabled = !politeVid			prVideo.playVideo(prVideoArray[i])			loading_mc.animGo()			videoLaunched = true;			vidIndex = i;								if(prAudioUI == 0 || !firstVideo){				turnSoundOn()			}else{				turnSoundOff();			}									if(hasControls){				this['playToggle_mc'].mouseEnabled = this['volToggle_mc'].mouseEnabled = this['progBG_mc'].mouseEnabled = false;				this['replayRestart_mc'].visible = false;				this['prog_mc'].scaleX = .01;			}								}				public function addMilestones(times:Array, handler:Function):void{			milestoneArray = times;			milestoneHandler = handler;						if(prVideo && milestoneArray != null && times != null){				prVideo.progressTracker.addEventListener(PrProgressEvent.CUSTOM_MILESTONE, milestoneHandler)				prVideo.progressTracker.customMilestones = milestoneArray			}		}				//		private function bufferHandler(e:PrVideoEvent):void{//			switch(e.type){//				case PrVideoEvent.BUFFER_EMPTY://					loading_mc.animGo()//					break;//				case PrVideoEvent.BUFFER_FULL://					loading_mc.animStop()//					break;//			}//		}				private function videoProgressHandler(e:PrProgressEvent):void{			vidLenArray[0] = PrProgressEvent(e).totalTime							if (hasControls) {				 				var t:uint = vidLenArray[vidIndex] - PrProgressEvent(e).currentTime ;				var s:String = String(int(t % 60));				var m:String = (String((t - int(s))/60));				s = (s.length > 1)? s : '0'+s;				m = (m.length > 1)? m : '0'+m;								this['timer_txt'].text = m + ':' + s								playedPct = 1-  (t / PrProgressEvent(e).totalTime); 				trace("\n playedPct: " + playedPct)				this['prog_mc'].scaleX = playedPct ;								if(this['prog_mc'].width > this['scrub_mc'].width * .5 && this['prog_mc'].width < videoWidth - this['scrub_mc'].width * .5)this['scrub_mc'].x = this['prog_mc'].width - this['scrub_mc'].width *.5			}		}				private function replayRestartHandler(e:PrVideoEvent):void{			videoStartHandler(null);			//loading_mc.animGo();			resetCustomMilestones();		}				private function videoStartHandler(e:PrProgressEvent):void {			firstVideo = false;			//prVideo.addEventListener(PrVideoEvent.BUFFER_EMPTY, bufferHandler);			//prVideo.addEventListener(PrVideoEvent.BUFFER_FULL, bufferHandler);			//videoObject.visible = true;						loading_mc.animStop()						if(hasControls){				//this['sound_mc'].visible = (prAudioUI == 1);							//	this['progBG_mc'].addEventListener(MouseEvent.MOUSE_DOWN, startScrub);				this['playToggle_mc'].mouseEnabled = this['volToggle_mc'].mouseEnabled = true//this['progBG_mc'].mouseEnabled = true;				this['playToggle_mc'].play_mc.visible = false;				//this['replayRestart_mc'].visible = false;				this['playToggle_mc'].pause_mc.visible = true;			}						videoPlaying = true;			videoComplete = false;					clearTimeout(politeTimeout);						if(politeVid && prVideoUI == 0){				politeTimeout = setTimeout(kill, 14500);			}						if(e != null){				dispatchEvent(new Event(VIDEO_START));			}		}		private function videoCompleteHandler(e:PrProgressEvent = null):void {			//prVideo.removeEventListener(PrVideoEvent.BUFFER_EMPTY, bufferHandler);			//prVideo.removeEventListener(PrVideoEvent.BUFFER_FULL, bufferHandler);			loading_mc.animStop()						if(hasControls){				//this['progBG_mc'].removeEventListener(MouseEvent.MOUSE_DOWN, startScrub);				//removeEventListener(MouseEvent.MOUSE_UP, stopScrub);				this['playToggle_mc'].play_mc.visible = true				this['playToggle_mc'].pause_mc.visible = false;				//this['replayRestart_mc'].visible = (e != null);				this['sound_mc'].visible = false			}						videoPlaying = false;			videoComplete = true;						if(e != null && cycleVids && !politeVid){				launchNextVideo();			}						if(e != null)dispatchEvent(new Event(VIDEO_END));		}				private function startScrub(e:MouseEvent):void{			addEventListener(MouseEvent.MOUSE_UP, stopScrub);			scrub = true;		}				var vidLenArray:Array = new Array();//				private function stopScrub(e:MouseEvent):void{			removeEventListener(MouseEvent.MOUSE_UP, stopScrub);			pointroll.trackActivity(1008);			var pct:Number = this['progBG_mc'].mouseX / this['progBG_mc'].width			var sec:Number = pct * vidLenArray[vidIndex]			prVideo.seek(sec)			scrub = false;		}				private function togglePlaying():void{			if(!videoLaunched){				launchVideo(0);			}else if(politeVid && !videoPlaying){				launchFullVideo();			}else if(videoComplete){				restartVideo();			}else if(videoPlaying){				pauseVideo();			}else{				playVideo();			}		}				public function playVideo():void{			if(hasControls){				//this['playToggle_mc'].pause_mc.visible = true;				//this['playToggle_mc'].play_mc.visible  = false;			}			videoPlaying = true;			prVideo.resume();		}				public function pauseVideo():void{			if(hasControls){				this['playToggle_mc'].pause_mc.visible = false;				this['playToggle_mc'].play_mc.visible = true//this['replayRestart_mc'].visible = true;			}			videoPlaying = false;			prVideo.pause()		}				public function restartVideo():void{			loading_mc.animGo()			if(hasControls){				this['playToggle_mc'].pause_mc.visible = true;				this['playToggle_mc'].play_mc.visible = false;			}							if(prAudioUI == 1){				prVideo.restartWithSound()				turnSoundOn(true)			} else {				prVideo.restart();			}		}					private function toggleVolume():void{			if(prAudioUI == 1){				prVideo.restartWithSound();				turnSoundOn(true)			}else if(muted){				turnSoundOn()			}else{				turnSoundOff();			}		}				private function turnSoundOn(justControls:Boolean = false):void{			prAudioUI = 0;			muted = false;			if(!justControls)prVideo.unmute()									if(hasControls){				this['volToggle_mc'].vibes_mc.visible = true				this['sound_mc'].visible = false			}		}				private function turnSoundOff():void{			muted = true;			prVideo.mute()						if(hasControls)this['volToggle_mc'].vibes_mc.visible = false		}				private function launchFullVideo():void{			politeVid = false;						if(muted)turnSoundOn();						launchVideo(0);		}				public function launchPrevVideo():void{			vidIndex = (vidIndex > 0)? vidIndex - 1 : vidCount			launchVideo(vidIndex)		}				public function launchNextVideo():void {			vidIndex = (vidIndex < vidCount)? vidIndex + 1 : 0			launchVideo(vidIndex)		}				public function resetCustomMilestones():void{			milestoneArray = null;			milestoneHandler = null;			if(prVideo)prVideo.progressTracker.resetCustomMilestones();		}				public function kill(e:Event = null):void{			if(prVideo){				trace('the video is dead')				prVideo.destroy();				videoCompleteHandler()				videoLaunched = false			}		}				public function setVideoDimensions(W:uint, H:uint):void{			videoObject.width = W;			videoObject.height = H;			centerVideo();		}				public function setPlayerDimensions(W:uint, H:uint):void{			drawBG(W, H)			centerVideo();		}				private function drawBG(W:int, H:int):void{			click_mc.graphics.beginFill(0, 0)			click_mc.graphics.drawRect(0,0,W,H)						bg_mc.name = 'bg_mc'			bg_mc.graphics.clear();			bg_mc.graphics.beginFill(0x000000, .9);			bg_mc.graphics.drawRect(0,0,W,H)			if(!getChildByName('bg_mc')){				addChildAt(bg_mc, 0);			}		}				private function centerVideo():void{			videoObject.x = int(.5*(bg_mc.width - videoWidth))			videoObject.y = int(.5*(bg_mc.height - videoHeight))			loading_mc.x = int(videoObject.x + videoWidth *.5);			loading_mc.y = int(videoObject.y + videoHeight *.5);		}	}}