package com.pointroll.Widgets {			//-------------------------------------------//	// IMPORT POINTROLL: API	//-------------------------------------------//	import PointRollAPI_AS3.PointRoll;		// IMPORT REQUIRED CLASSES FROM FLASH	import flash.display.MovieClip;	import flash.display.Loader;	import flash.net.URLRequest;	import com.pointroll.Widgets.Debug;		// Error Classes;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.events.EventDispatcher;			public class FileLoader extends MovieClip {				private var _DEBUG = false;				protected var myPR:PointRoll;		protected var context:*;		protected var fileLoader:Loader;		protected var _fileStatus:String;		protected var _fileName:String;		protected var _completeHandler:Function = defaultCompleteHandler;		protected var _securityFailHandler:Function = defaultSecurityFailHandler;		protected var _ioFailhandler:Function = defaultIOFailHandler;				protected var defaultLocalDirectory:String = "./";		protected var _localDirectory:String = defaultLocalDirectory;			protected var loadFileName:String;						protected var _loadComplete:Boolean = false;		protected var _loadValid:Boolean = false;				public var _pingBack:Function = null;						public function FileLoader(inContext:*, fileName:String, itemName:String, inFileStatus:String = "Live"):void {						context = inContext;			myPR = PointRoll.getInstance(context);			_fileName = fileName;			fileStatus = inFileStatus;			fileLoader = new Loader();			fileLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, _completeHandler, false, 0, true);			fileLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, _ioFailhandler, false, 0, true);			fileLoader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, _securityFailHandler, false, 0, true);							fileLoader.name = "FileLoader";				this.name = itemName;		}		public function loadFile():void {			switch (fileStatus) {				case "Network":				case "NETWORK":					loadFileName = fileName;					break;				case "Test":				case "TEST":				case "Backup":				case "BACKUP":					loadFileName =  myPR.absolutePath+fileName;										break;				case "Live":				case "LIVE":					loadFileName = myPR.absolutePath+fileName;								break;				case "Local":				case "LOCAL":										default:					loadFileName = localDirectory + fileName;					break;					}						Debug.it("FileLoader: Getting Info for file:"+loadFileName);						fileLoader.load(new URLRequest(loadFileName));			this.addChild(fileLoader);					}		private function defaultCompleteHandler(e:Event) {			if (_DEBUG) {								Debug.it("FileLoader: Result from file: "+loadFileName);			}			_loadComplete = true;			_loadValid = true;						if (pingBack != null) {				pingBack();			}							}					private function defaultIOFailHandler(e:IOErrorEvent):void {			Debug.it("FileLoader: Failed to load file ("+loadFileName+") because of a(n) " + e.type + " error.");			_loadComplete = true;			_loadValid = false;			if (pingBack != null) {				pingBack();			}				}			private function defaultSecurityFailHandler(e:SecurityErrorEvent):void {			Debug.it("FileLoader: Failed to load file ("+loadFileName+") because of a(n) " + e.type + " error.");			_loadComplete = true;			_loadValid = false;						if (pingBack != null) {				pingBack();			}							}		public function set completeFunction(value:Function):void {			fileLoader.removeEventListener(Event.COMPLETE, _completeHandler, false);			_completeHandler = value;			fileLoader.addEventListener(Event.COMPLETE, _completeHandler, false, 0, true);		}		public function set IOfailFunction(value:Function):void {			fileLoader.removeEventListener(IOErrorEvent.IO_ERROR, _ioFailhandler, false);			_ioFailhandler = value;			fileLoader.addEventListener(IOErrorEvent.IO_ERROR, _ioFailhandler, false, 0, true);		}			public function set securityFailHandler(value:Function):void {			fileLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, _securityFailHandler, false);			_securityFailHandler = value;			fileLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, _securityFailHandler, false, 0, true);		}				public function set pingBack(value:Function):void {			_pingBack = value;		}		public function get pingBack():Function {			return _pingBack;		}				public function get loadComplete():Boolean {			return _loadComplete;		}		public function get loadValid():Boolean {			return _loadValid;		}		public function get fileContent():* {			return fileLoader.content;		}		public function set localDirectory(value:String):void {			_localDirectory = value;		}		public function get localDirectory():String {			return _localDirectory;		}				public function set fileName(value:String):void {			_fileName = value;		}		public function get fileName():String {			return _fileName;		}				public function set fileStatus(value:String):void {			_fileStatus = value;		}		public function get fileStatus():String {			return _fileStatus;		}			}}