package com.PointRoll.Widgets {	import flash.utils.Dictionary;		//-------------------------------------------//	// POINTROLL REQUIRED ADCONTROL CLASSES 	//-------------------------------------------//	import com.pointroll.api.events.AdControlEvent;	import com.pointroll.api.data.AdControl;	import pointroll.getFlashVar;		import com.PointRoll.Widgets.Debug;	import flash.events.EventDispatcher;	import pointroll.info.getFolderPath;	import pointroll.info.getPlacementID;	import pointroll.info.getImpressionID;	import pointroll.initAd;		public class AdControlHandler extends EventDispatcher {				private var _DEBUG = false;				protected var ac:AdControl;				protected var context:*;		protected var _acStatus:String;				private var defaultInterfaceID:String = "21f8e413-a59a-4a4c-9ad7-27ee388b1b2d";		private var defaultLocalFileName:String = "AdControlText.xml";		private var defaultLocalDirectory:String = "./";		private var maxCustomAttributes:Number = 15;		private var customGeoIDDictionary:Dictionary = new Dictionary;				private var _localFileName:String = defaultLocalFileName;		private var _localDirectory:String = defaultLocalDirectory;				private var _customProperties:Object = new Object();		private var _namedProperties:Object = new Object();		protected var _completeFunction:Function = defaultCompleteHandler;		protected var _failFunction:Function = defaultFailHandler;				protected var _loadComplete:Boolean = false;		protected var _loadValid:Boolean = false;				protected var _returnData:XML = new XML("");				public var _pingBack:Function = null;				public function AdControlHandler(inContext:*, inACStatus:String = "Live") {						context = inContext;			pointroll.initAd(context)			//pr = PointRoll.getInstance(context);					if (context != null) {				ac = new AdControl()				//ac = new AdControl(context);			}			acStatus = inACStatus;			if (ac != null) {				//---------------------------------------------------------------//				// CREATE HANDLERS FOR AdControl Events				ac.addEventListener(AdControlEvent.LOAD_COMPLETE, _completeFunction, false, 0, true);				ac.addEventListener(AdControlEvent.LOAD_FAIL, _failFunction);							}				}		public function set thisInterfaceID(value:String):void {			trace(' what is the value ', value);			if(getImpID()!=null) value + getImpID();			ac.interfaceID = value;		}				public function get thisInterfaceID():String {			return ac.interfaceID;		}				public function getACData():void {			if (ac != null) {				trace("\n acStatus: " + acStatus)				switch (acStatus) {					case "Test":					case "TEST":					case "Backup":					case "BACKUP":						ac.localTestFile =  pointroll.info.getFolderPath()+localFileName;											break;					case "Live":					case "LIVE":						ac.localTestFile = undefined;											if ((ac.interfaceID == null) ||  (ac.interfaceID == "")) {							ac.interfaceID = defaultInterfaceID;						}											break;					case "Local":					case "LOCAL":											default:						ac.localTestFile = localDirectory + localFileName;						break;						}				ac.load();			} else {				Debug.it("AdControlHandler.getACData(): Ad Control Object is null");			}		}		public function set completeFunction(value:Function):void {			ac.removeEventListener(AdControlEvent.LOAD_COMPLETE, _completeFunction, false);			_completeFunction = value;			ac.addEventListener(AdControlEvent.LOAD_COMPLETE, _completeFunction, false, 0, true);		}		public function set failFunction(value:Function):void {			ac.removeEventListener(AdControlEvent.LOAD_COMPLETE, _failFunction, false);			_failFunction = value;			ac.addEventListener(AdControlEvent.LOAD_COMPLETE, _failFunction, false, 0, true);		}		protected function defaultCompleteHandler(e:AdControlEvent):void {			Debug.it("AdControlHandler.defaultCompleteHandler() - Successful Load.");			//Debug.it("XML data: \n" +ac.getXMLData());			_returnData = ac.getXMLData();			_loadComplete = true;			_loadValid = true;			if (pingBack != null) {				pingBack();			}					}				protected function defaultFailHandler(e:AdControlEvent):void {			Debug.it("AdControlHandler.defaultFailHandler(): The XML has failed to load.");			_loadComplete = true;			_loadValid = false;			if (pingBack != null) {				pingBack();			}					}		public function set pingBack(value:Function):void {			_pingBack = value;		}		public function get pingBack():Function {			return _pingBack;		}		public function get loadComplete():Boolean {			return _loadComplete;		}		public function get loadValid():Boolean {			return _loadValid;		}		public function get returnData():XML {			return _returnData;		}		public function set localFileName(value:String):void {			_localFileName = value;		}		public function get localFileName():String {			return _localFileName;		}		public function set localDirectory(value:String):void {			_localDirectory = value;		}		public function get localDirectory():String {			return _localDirectory;		}		public function setCustomProperty(id:Number, value:String):void {			_customProperties["Custom"+id] = value;							if ((ac != null) && (id > 0) && (id <= maxCustomAttributes)) {				ac["Custom"+id] = value;			}		}		public function setCustomGeo(id:Number, value:String):void {			customGeoIDDictionary[id] = value;			//pr.parameters["CustomGeo"+id] = value;		}				public function set acStatus(value:String):void {			_acStatus = value;		}		public function get acStatus():String {			return _acStatus;		}		public function getCustomProperty(id:Number):String {			if ((ac != null) && (id > 0) && (id <= maxCustomAttributes)) {				return ac["Custom"+id];			} else {								return _customProperties["Custom"+id];			}		}		public function getCustomGeo(id:Number):String {			return customGeoIDDictionary[id];			//return pr.parameters["CustomGeo"+id];		}					public function set clearSTSonLoad(value:Boolean) {			if (ac != null) {				ac.clearSTSonLoad = value;			}		}		public function get clearSTSonLoad():Boolean {			if (ac != null) {				return ac.clearSTSonLoad;			} else {				return true;			}		}				public function getImpID():String{			//var guid:String = pr.parameters.PRImpID;			var guid:String = pointroll.getFlashVar('PRImpID');			if(guid){				guid = guid.substr(0,8)+'-'+guid.substr(8,4)+'-'+guid.substr(12,4)+'-'+guid.substr(16,4)+'-'+guid.substr(20,12);				return guid.toUpperCase();					} else{				return  null;			}		}	}}		