package com.pointroll.data{	import pointroll.*;	import pointroll.datastorage.*;	import com.pointroll.interfaces.ISerializable;	import com.pointroll.interfaces.IPRDataStorage;	import flash.utils.Timer;	import flash.events.TimerEvent;	import com.pointroll.events.DataStorageEvents;	import flash.display.Sprite;	import com.pointroll.utils.Base64;	import flash.utils.ByteArray;	public class PRDataStorage extends Sprite implements IPRDataStorage,ISerializable {		private var _timer:Timer;		private var delay_n:Number;		private var count_n:Number;		public static function checkAvailability(delay:Number,count:int):void {			delay_n = delay;			count_n = count;			_timer = new Timer(delay,count);			_timer.addEventListener("timer",onTimerEvent);		}		public static function startTimer():void {			_timer.start();		}		public static function dsCheckOnInterval(name:String,frequency:Number,callFunction:Function):void {			pointroll.datastorage.checkOnInterval(name,frequency,callFunction);		}		public static function stopAlert(name:String):void {			pointroll.datastorage.stopAlert(name);		}		public static function compress(str:String):String {			var b:ByteArray = new ByteArray();			b.writeObject( str );			b.compress();			return Base64.Encode( b );		}		public static function uncompress(str:String):String {			var b:ByteArray = Base64.Decode(str);			b.uncompress();			return b.toString();		}		// GETTERS & SETTERS		public static function getVariable(name:String):String {			return pointroll.datastorage.getExternalVariable(name);		}		public static function setVariable(name:String,value:String):void {			pointroll.datastorage.setExternalVariable(name,value);		}		public static function get dsAvailable():Boolean {			return pointroll.datastorage.available;		}		// EVENT		public static function onTimerEvent(e:TimerEvent):void {			trace("Is DataStorage ready " + DataStorage.available + " count is " + _timer.currentCount);			if (pointroll.datastorage.available) {				dispatchEvent(new DataStorageEvents(DataStorageEvents.ON_DATA_STORAGE_LOAD,true));				_timer.stop();			}			if (_timer.currentCount == count_n) {				dispatchEvent(new DataStorageEvents(DataStorageEvents.ON_DATA_STORAGE_FAIL,false));			}		}	}}