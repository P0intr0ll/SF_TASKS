package com.staf{	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.events.FocusEvent;	import flash.events.Event;	import flash.utils.setTimeout;	import flash.text.TextField;	import flash.utils.clearTimeout;	import flash.net.*;	import com.pointroll.api.form.PointRollForm;	import pointroll.info.getCampaignID;	import pointroll.info.getPlacementID;	import com.pointroll.api.events.FormEvent;	public class SendToAFriendUtilities extends MovieClip {		private const MESSAGE_ARRAY:Array = new Array('All names must be at least two characters in length, and email addresses must be in name@domain.com format.', 'Thank you. Email shall be sent shortly.')				public var main_mc:MovieClip;		protected var prForm:PointRollForm;		protected var creativeID:String;		protected var placementID:String;						private var varLoader:URLLoader = new URLLoader();		private var submitRequest:URLRequest;		private var messageTimeout:Number;		private var enterSubmit:Boolean = false;		protected var nFields:int				private var send_mc:MovieClip;		private var boxes_mc:MovieClip;		private var next_mc:MovieClip;		private var message_txt:TextField;		private var urlBase:String;		private var originalTextArray:Array = new Array();		protected var activeTextFields:Array;				public function SendToAFriendUtilities(main:MovieClip, formBaseURL:String, fieldsInForm:int, dataCollectID:String):void {			main_mc = main;			if(dataCollectID)prForm = new PointRollForm(dataCollectID)			nFields = fieldsInForm			urlBase = formBaseURL						creativeID = pointroll.info.getCampaignID() || '1111';			placementID =  pointroll.info.getPlacementID() || '1111'			send_mc = getChildByName('send_mc') as MovieClip;			boxes_mc = getChildByName('boxes_mc') as MovieClip;			next_mc = getChildByName('next_mc') as MovieClip;			message_txt = getChildByName('message_txt') as TextField;									for(var i:int = 0; i < nFields; i++){				var tf:TextField = this['t'+i] as TextField;				originalTextArray[i] = tf.text;				tf.addEventListener(FocusEvent.FOCUS_IN,textFocusHandler);				tf.addEventListener(FocusEvent.FOCUS_OUT,textFocusHandler);				if(i > 0){					tf.tabIndex = this['t'+int(i-1)].tabIndex + 1;				} else {					tf.tabIndex = 90 + Math.round(Math.random() * 10);				}			}						//closeSTAF_mc.addEventListener(MouseEvent.CLICK, main_mc.closeSTAF);			//send_mc.buttonMode = true;			//send_mc.mouseChildren = false;						send_mc.addEventListener(MouseEvent.CLICK,submitForValidation);			message_txt.visible = false;		}		private function textFocusHandler(e:FocusEvent=null):void {			var i:int = int(e.target.name.substr(-1,1))			switch(e.type){				case FocusEvent.FOCUS_IN:					if(e.target.text == originalTextArray[i]){						e.target.text = ''					}					break;				case FocusEvent.FOCUS_OUT:					if(e.target.text == ''){						e.target.text = originalTextArray[i]					}			}						enterSubmit = !enterSubmit;			setEnterSubmission(enterSubmit);		}				private function setEnterSubmission(TorF:Boolean){			if (TorF) {				main_mc.stage.addEventListener(KeyboardEvent.KEY_DOWN,reportKeyDown);			} else {				main_mc.stage.removeEventListener(KeyboardEvent.KEY_DOWN,reportKeyDown);			}			enterSubmit = TorF;		}		private function submitForValidation(e:MouseEvent):void {						if(prForm.validate()){				trace('ALL FIELDS PASSED!');				sendData();			}else{				trace('VALIDATION FAILURE');				subShowMessage(0);			}		}		private function sendData():void {			prForm.baseURL = urlBase + '?'+generateEmailData();			prForm.submitForm()			prForm.addEventListener(FormEvent.FORM_RETURN, emailSuccess)		}				private function emailSuccess(e:FormEvent) {			subShowMessage(1);			///setTimeout(main_mc.closeSTAF, 2500);			setTimeout(resetForm, 3100);			traceData();		}		private function reportKeyDown(e:KeyboardEvent):void {			switch (e.charCode) {				case 13 :					send_mc.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			}		}				protected function showMessage(i:int):void{			message_txt.text = MESSAGE_ARRAY[i];						activeTextFields[0].visible = activeTextFields[1].visible = false;			//for(var n:int = 0; n < nFields; n ++){//				//				this['t'+n].visible = false;//			}						message_txt.visible = true;			boxes_mc.visible = false;						if(i == 0){				messageTimeout = setTimeout(subHideMessage, 3000)				message_txt.addEventListener(MouseEvent.CLICK, subHideMessage)			}						setEnterSubmission(false)		}						protected function hideMessage(e:MouseEvent = null):void{			clearTimeout(messageTimeout);						activeTextFields[0].visible = activeTextFields[1].visible = true;//			for(var n:int = 0; n < nFields; n ++){//				this['t'+n].visible = true;//			}						boxes_mc.visible = true;			message_txt.visible = false;			message_txt.removeEventListener(MouseEvent.CLICK, subHideMessage)			setEnterSubmission(true)		}				protected function resetForm():void{			setActiveFields([getChildByName('t0'), getChildByName('t1')])			send_mc.visible = false;			next_mc.visible = true;						for(var n:int = 0; n < nFields; n ++){				this['t'+n].text = originalTextArray[n];			}						hideMessage();		}				protected function setActiveFields(fields:Array):void{			activeTextFields[0].visible = activeTextFields[1].visible = false			activeTextFields = fields			activeTextFields[0].visible = activeTextFields[1].visible = true;		}				//-------------------OVERRIDDEN FUNCTIONS -----------------------//								protected function subHideMessage(e:MouseEvent = null):void{					}					protected function subShowMessage(i:int):void{					}				protected function generateEmailData():String{			return '';		}				protected function traceData():void {			trace('--DATA ACCEPTED--');		}	}}