package com.pointroll.scroller{	import com.pointroll.interfaces.IScroller;	import flash.display.MovieClip;	import com.greensock.TweenNano;		import flash.events.Event;	import flash.events.EventDispatcher;		import flash.display.Sprite;		import flash.utils.Timer;	import flash.events.TimerEvent;		import com.pointroll.events.PRScrollerEvents;	public class PRBasicScroller  extends EventDispatcher implements IScroller{		private var _totalItems:int;		private var _currentPage:int;		private var _totalPages:int;		private var _howManyToDisplay:int;		private var _autoScrollItems:int;		private var _maskMc:Sprite;		private var _holder:MovieClip;		private var _itemWidth:Number;		private var _distance:Number;		private var _startX:Number;		private var _duration:Number;		private var _padding:Number;		private var _canScroll:Boolean;		private var _infinite:Boolean;				private var _items:Array;				private var _timer:Timer;				private var _dataObject:Object;		public function PRBasicScroller(items:Array, h:MovieClip, m:Sprite, numberOfItems:int, howManyProductsToDisplay:int, infinite:Boolean = false) {			_items = items;			_holder = h;			_maskMc = m;			_totalItems = numberOfItems;			_howManyToDisplay = howManyProductsToDisplay;			_totalPages = Math.ceil((_totalItems / _howManyToDisplay));			_itemWidth = _items[0].width;			_currentPage = 1;			_distance = _itemWidth * _howManyToDisplay;			_infinite = infinite;			_canScroll = true;			_dataObject = new Object();			buildScroller();		}		private function buildScroller():void {			trace("buildScroller ::> _howManyToDisplay: " +_howManyToDisplay + " _totalPages: " + _totalPages + " " + _distance);			_holder.mask = _maskMc;			_holder.x = _maskMc.x;			_holder.y = _maskMc.y;			_duration = .5;			_padding =0;			_infinite = false;		}			public function autoScroll(duration:Number, howManyItems:int):void{			_autoScrollItems = howManyItems;			_timer = new Timer(duration, _autoScrollItems);			_timer.addEventListener(TimerEvent.TIMER, onTimerEvent);			_timer.start();		}		public function reset(numberOfItems:int,howManyProductsToDisplay:int):void{			_totalItems = numberOfItems;			_howManyToDisplay = howManyProductsToDisplay;			_totalPages = Math.ceil((_totalItems / _howManyToDisplay));			_itemWidth = _holder.width / _totalItems;			_currentPage = 1;			_distance = _itemWidth * _howManyToDisplay;			_canScroll = true;			_startX = _holder.x			buildScroller();		}		public function previousItem():void {						if (_canScroll) {				if (_currentPage != 1) {					_canScroll = false;					_currentPage--;										_dataObject.currentPage = _currentPage;										TweenNano.to(_holder,_duration,{x:(_distance+_holder.x),onComplete:onScrollerTweening});												dispatchEvent(new PRScrollerEvents(PRScrollerEvents.ON_PREVIOUS_ITEM, _dataObject));					if(_currentPage == 1)						dispatchEvent(new PRScrollerEvents(PRScrollerEvents.ON_SCROLL_MIN_END,_dataObject));									}			}		}		public function nextItem():void {				if (_canScroll) {														if (_currentPage != _totalPages) {										_canScroll = false;					_currentPage++;													 	_dataObject.currentPage = _currentPage;										TweenNano.to(_holder,_duration,{x:(_holder.x-_distance),onComplete:onScrollerTweening});											dispatchEvent(new PRScrollerEvents(PRScrollerEvents.ON_NEXT_ITEM, _dataObject));				}				if(_currentPage == _totalPages){					if(_timer)						killAutoTimer()											dispatchEvent(new PRScrollerEvents(PRScrollerEvents.ON_SCROLL_MAX_END,_dataObject));				}			}		}		public function killAutoTimer():void{			if(_timer){				_timer.stop();				_timer.removeEventListener(TimerEvent.TIMER, onTimerEvent);				_timer = null;			}		}				//EVENTS		private function onScrollerTweening():void {			_canScroll = true;		}				private function onTimerEvent(e:TimerEvent):void{			if(_timer.currentCount == _autoScrollItems){				killAutoTimer()			}else{				nextItem();			}					}						// GETTERS SETTERS		public function get currentPage():Number{			return _currentPage;		}				public function set duration(d:Number):void{			_duration = d;		}		public function set padding(p:Number):void{			_padding = p;		}	}}