package com.pointroll.loader {	import flash.display.Loader;	import flash.display.Sprite;	import flash.display.DisplayObject;		import flash.system.LoaderContext; 		import flash.net.URLRequest;		import flash.events.Event;	import flash.events.IOErrorEvent;		import flash.events.EventDispatcher;				import com.pointroll.events.MultipleLoaderEvent;		import com.pointroll.utils.ClassProperty;		public class MultipleLoader extends EventDispatcher {		private var _loader:Loader;				private var _elementLength:int;		private var _currentElement:int;				private var _elements:Array;		private var _loadedElements:Array;				private var _filePath:String;				private var _dataObject:Object;				private var _loaderContext:LoaderContext;				public function MultipleLoader() {			init();					}		public function addElement(element:Object):void{			if(!_elements)				_elements = new Array();							_elements.push(element);		}		public function load():void{			if(_elements.length){				_loader.load(new URLRequest(_elements[0].fileName),_loaderContext);			}else{				trace("There are no elements to load");			}		}		private function init():void{			_dataObject = new Object();			_loadedElements = new Array();						_currentElement = 0;						_loaderContext = new LoaderContext();			_loaderContext.checkPolicyFile = true;						_loader = new Loader();			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoaderEvent);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onLoaderEvent);		}		private function addElementToContainer(child:DisplayObject):void{			_loadedElements.push(child);			_currentElement++;						//trace("currentElement: " + _currentElement + " totalElements: " + _elements.length);			if(_currentElement == _elements.length){								_dataObject.eventType = "onLoaderComplete";				_dataObject.content = _loadedElements;				dispatchEvent(new MultipleLoaderEvent(MultipleLoaderEvent.ON_LOADER_COMPLETE,_dataObject));				resetLoader();			}			else{				trace(_elements[_currentElement].fileName);			   _loader.load(new URLRequest(_elements[_currentElement].fileName),_loaderContext);			}		}		private function resetLoader():void{			_elements = null;			_loadedElements = null;			_dataObject = new Object();			_currentElement = 0;			_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onLoaderEvent);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onLoaderEvent);		}		// EVENTS		private function onLoaderEvent(e:Object):void{			switch(e.type){				case "complete":					 addElementToContainer(_loader.content);				break;				case "ioError":					trace(e);					 _dataObject.eventType = "onLoaderFail";					 					 dispatchEvent(new MultipleLoaderEvent(MultipleLoaderEvent.ON_LOADER_FAIL,_dataObject));				break;			}		}	}	}