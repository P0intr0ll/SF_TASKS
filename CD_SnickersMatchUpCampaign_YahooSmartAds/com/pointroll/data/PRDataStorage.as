package com.pointroll.data{	import pointroll.datastorage.*;		import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.EventDispatcher;		import flash.display.Sprite;		import com.pointroll.events.DataStorageEvents;	public class PRDataStorage extends EventDispatcher{		private static var _timer:Timer;		private static var _count:Number;		private static var _delay:Number;				private static var _callBackFunction:Function;				public static function checkAvailability(delay:Number,count:int,callBackFunction:Function):void {			_delay = delay;			_count = count;			_callBackFunction = callBackFunction;						_timer = new Timer(delay,count);			_timer.addEventListener(TimerEvent.TIMER, onTimerEvent);		}		public static function startTimer():void {			_timer.start();		}		public static function checkOnInterval(name:String,frequency:Number,callFunction:Function):void {			pointroll.datastorage.checkOnInterval(name,frequency,callFunction);		}		public static function stopAlert(name:String):void {			pointroll.datastorage.stopAlert(name);		}				// GETTERS & SETTERS		public static function readExternalVariable(name:String):String {			return pointroll.datastorage.readExternalVariable(name);		}		public static function setExternalVariable(name:String,value:String):void {			pointroll.datastorage.setExternalVariable(name,value);		}		public static function dataStorageIsAvailable():Boolean {			return pointroll.datastorage.dataStorageIsAvailable();		}		// EVENT		public static function onTimerEvent(e:TimerEvent):void {			trace("Is DataStorage ready " + pointroll.datastorage.dataStorageIsAvailable() + " count is " + _timer.currentCount);			if (pointroll.datastorage.dataStorageIsAvailable()) {				_callBackFunction(true);				_timer.stop();				_timer.removeEventListener("timer",onTimerEvent);				_timer = null;			}			if (_timer.currentCount == _count) {				_callBackFunction(false);				_timer.stop();				_timer.removeEventListener("timer",onTimerEvent);				_timer = null;			}		}	}}