package com.utils {	import com.interfaces.IComparable; 	public class ArrayUtil {		/**		 * Copies an array by value instead of by reference, as with the assignment operator.		 * @param $arr:Array - The array to copy.		 * @return Array - a new array containing the same values as $arr.		 * @usage This method is used as an alternative to the assignment operator(=) for creating a copy of an array.		 * It differs from the assignment operator in that it copies the values of the target array into a new array, versus copying		 * the reference (a pointer to a location in memory) of the target array as the assignment operator does.  The difference in usage 		 * and effect between the two methods is illustrated below: <br>		 * 		 * <code>		 * package com.documentation.examples.ArrayUtil {		 *		import com.rga.digitalAdvertising.utils.ArrayUtil;		 *			 *		import flash.display.Sprite;		 *			 *				 *		public class ArrayUtilDeepCopyExample extends Sprite {		 *					 *			public function ArrayUtilDeepCopyExample() {		 *				var arr1 : Array = new Array("A", "B", "C", "D"); //create new array with values A,B,C,D.		 *				var arr2 : Array = arr1; //copy arr1 to arr2 using assignment operator.		 *				var arr3 : Array = ArrayUtil.deepCopy(arr1); // copy arr1 to arr3 using ArrayUtil.deepCopy.		 *			 *				trace('arr1: ' + (arr1)); //output - arr1: A,B,C,D		 *				trace('arr2: ' + (arr2)); //output - arr2: A,B,C,D		 *				trace('arr3: ' + (arr3)); //output - arr3: A,B,C,D		 *			 *				arr1.pop(); // remove last element from arr1.		 *			 *				trace('arr1: ' + (arr1)); //output - arr1: A,B,C		 *				trace('arr2: ' + (arr2)); //output - arr2: A,B,C		 *				trace('arr3: ' + (arr3)); //output - arr3: A,B,C,D		 *									 *				//Note that the pop operation on arr1 affected both arr1 and arr2, but not arr3.		 *				//This is because the assignment operator creates a copy of arr1's reference and places it into arr2, so that arr1		 *				//and arr2 point to the same location in memory.  Therefore any operation performed on arr1 will be reflected in arr2,		 *				//and vice versa.		 *				//arr3, however, was copied by value using ArrayUtil.deepCopy.  It does not point to the same location in memory as		 *				//arr1 and arr2, but rather points to a separate location in memory that contains copies of the values contained in		 *				//arr1 at the time that the ArrayUtil.deepCopy call was made.  Therefore changes to arr1 will not affect arr3, and 		 *				//vice versa.  arr3 is an independent copy of arr1.		 *			}		 *		}		 *	}		 * </code>		 * @see <a href="http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/operators.html#assignment">Adobe Livedocs - Assignment Operator </a> 		 */		public static function deepCopy($arr : Array) : Array {			var copy : Array = new Array();			var len : uint = $arr.length;						for (var i : Number = 0;i < len;i++) {				copy.push($arr[i]);			}						return copy;		}		/**		 * Searches for an item in an array by using strict equality (===), and returns all index positions of the item. 		 * @param $item:{@literal *} - The item to search for in the array.		 * @param $arr:Array - The array to be searched.		 * @return Array - an array containing all index positions in which $item appears, in order from first appearence to last.		 * @see <a href="http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/operators.html#strict_equality">Adobe Livedocs - Strict Inequality </a>		 */		public static function findAllIndexesOf($item : Object, $arr : Array) : Array {			var indexes : Array = new Array();			for (var i : Number = 0;i < $arr.length;i++) {				if ($arr[i] === $item) {					indexes[indexes.length] = i;				}			}			return indexes;		}		/**		 * Searches for an item in an array by using strict equality (===), and returns true if the item is present, and false if it is not.		 * @param $item:{@literal *} - The item to search for in the array.		 * @param $arr:Array - The array to be searched.		 * @return Boolean - true if the item is present in the array, and false if it is not.		 *  @see <a href="http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/operators.html#strict_equality">Adobe Livedocs - Strict Inequality </a>		 */		public static function isIn($item : *, $arr : Array) : Boolean {			var found : Boolean = false;			var i : Number = 0;					while(!found && i < $arr.length) {				if($item === $arr[i]) {					found = true;					//trace($item + " found=true\n\n\n");				}				//trace($item + " found:" + found);				i++;			}			return found;		}		/**		 * Returns a randomized copy of an array.		 * @param $arr:Array - The array to be randomized.		 * @return Array - a randomized copy of the array passed in $arr.		 */		public static function randomizeArr($arr : Array) : Array {			var randomArr : Array = new Array();			var tempCpy : Array = new Array();						tempCpy = deepCopy($arr);						while (tempCpy.length > 0) {				randomArr.push(tempCpy.splice(Math.round(Math.random() * (tempCpy.length - 1)), 1)[0]);			}						return randomArr;		}		/**		 * This function is designed to be passed to Array.sort() as the "compareFunction" parameter in order to facilitate custom sorts.		 * To use this method, the elements in the array to be sorted are required to implement {@link IComparable}, so that they possess an implementation of the compareTo method.		 * @param $item1: {@link IComparable} - The first item in the comparison.		 * @param $item2:{@link IComparable} - The second item in the comparison.		 * @see <a href="http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/Array.html#sort%28%29">Adobe Livedocs - Array Sort Method </a>		 * @see IComparable		 * @return -1, if $item1 should appear before $item2 in the sorted sequence.<br> 0, if $item1 equals $item2.<br> 1, if $item1 should appear after $item2 in the sorted sequence.		 * @implementationNote using ArrayUtil.customSortCompare requires that all elements of the array implement {@link IComparable}, so that they possess an implementation of the compareTo method.		 * @example In this example, an array of Duck objects is created, with each object having its own name and weight.		 * The Array.sort() method is used along with ArrayUtil.customSortCompare in order to sort the Ducks by using their		 * own compareTo method for comparison, rather than the default Array.sort() comparison, which sorts based on UNICODE		 * values.		 * <code>		 *package com.documentation.examples.ArrayUtil {		 *		import com.documentation.examples.IComparable.Duck;		 *		import com.rga.digitalAdvertising.utils.ArrayUtil;		 *		 *		import flash.display.Sprite;		 *		 *		public class ArrayUtilCustomSortCompareExample extends Sprite {		 *				 *			public function ArrayUtilCustomSortCompareExample() {		 *					 *				//The Duck Class implements IComparable and so provides a concrete implementation of compareTo.		 *				var ducks : Array = [new Duck("Daffy", 8), 		 *									new Duck("Dewey", 2),		 *									new Duck("Howard", 7),		 *									new Duck("Louie", 2),		 *									new Duck("Donald", 10),		 *									new Duck("Huey", 2)];		 *										 *				trace("Unsorted ducks: ", ducks); 	//output - Unsorted ducks:  Daffy weighs 8,Dewey weighs 2,		 *													//Howard weighs 7,Louie weighs 2,Donald weighs 10,Huey weighs 2		 *		 *				//sort the array using ArrayUtil.customSortCompare as the "compareFunction" parameter for the Array.sort method.		 *				//This overrides the native compare algorithm, which sorts according to Unicode values, and instead		 *				//uses the Duck.compareTo method specified by IComparable.		 *				ducks.sort(ArrayUtil.customSortCompare);		 *					 *				trace("Sorted ducks: ", ducks); //output - Sorted ducks:  Louie weighs 2,Dewey weighs 2,		 *												//Huey weighs 2,Howard weighs 7,Daffy weighs 8,Donald weighs 10		 *			}		 *		}		 *}		 *		 *</code>		 *<hr />		 *The Duck Class implements IComparable, and as such provides a custom mechanism for comparing two Duck objects.		 *Here, the weight of the ducks is used as the point of comparison.		 *<code>		 * 		 *package com.documentation.examples.IComparable {		 *		import com.rga.digitalAdvertising.interfaces.IComparable;		 *		 *		import flash.display.Sprite;		 *		 *		public class Duck extends Sprite implements IComparable {		 *			protected var _duckName : String;		 *			protected var _weight : int;		 *		 *			public function Duck($name : String, $weight : int) {		 *				duckName = $name;		 *				weight = $weight;		 *			}		 *		 *			public function get duckName() : String {		 *				return _duckName;		 *			}		 *		 *			public function set duckName($name : String) : void {		 *				_duckName = $name;		 *			}		 *		 *			public function get weight() : int {		 *				return _weight;		 *			}		 *		 *			public function set weight($weight : int) : void {		 *				_weight = $weight;		 *			}		 *					 *			//Concrete implementation of compareTo as specified by IComparable.		 *			//The weight of the ducks if used as the point of comparison		 *			public function compareTo($item : IComparable) : int {		 *				var otherDuck : Duck;		 *				var result : int;		 *					 *				if($item is Duck) {		 *					otherDuck = $item as Duck;		 *					if (weight < otherDuck.weight) {		 *						result = -1;		 *					} else if (weight == otherDuck.weight) {		 *						result = 0;		 *					} else { 		 *						// this.weight > otherDuck.weight		 *						result = 1;		 *					}		 *				} else {		 *					throw new ArgumentError("Cannot perform comparison.  $item must be, or descend from, type Duck.");		 *				}		 *					 *				return result;		 *			}		 *				 *			override public function toString() : String {		 *				return duckName + " weighs " + weight;		 *			}		 *		}		 *}		 * </code>		 */		public static function customSortCompare($item1 : IComparable, $item2 : IComparable) : int {			return $item1.compareTo($item2);		}	}}