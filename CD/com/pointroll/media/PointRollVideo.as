/************************************************************** Author: Tobi Echevarria** Company: PointRoll** Class: PointRollVideo implements IPointRollVideo interface***************************************************************/package  com.pointroll.media {		import com.pointroll.interfaces.IPointRollVideo;		import flash.events.EventDispatcher;		import PointRollAPI_AS3.media.PrVideo;		import flash.events.Event;	import flash.events.TimerEvent;	import PointRollAPI_AS3.events.media.PrProgressEvent;	import PointRollAPI_AS3.events.media.PrMediaEvent;	import com.pointroll.events.PRProgressVideoEvents;	import com.pointroll.events.PRVideoEvents;		import flash.utils.Timer;	import flash.utils.setTimeout;	import flash.media.Video;		import flash.display.Sprite;		public class PointRollVideo extends EventDispatcher implements IPointRollVideo {				private var _initVolumeLevel:Number;		private var _deliveryType:Number;		private var _videoLenInSec:Number;		private var _videoInstanceNumber:Number;				private var _timeOut:int;				private var _advertiserFolder:String;		private var _baseProgFilePath:String;		public var _baseStreamName:String;		private var _baseFilePath:String;				private var _videoObject:Video;				public var _prVideo:PrVideo;				private var _timer:Timer;				private var _isComplete:Boolean;				//	PrVideo(sAdvertiserFolder:String, sBaseProgFilePath:String, sBaseStreamName:String, nVideoLenInSecs:Number, oVideoObject:DisplayObject, 		//	nInitVolumeLevel:Number, nVideoInstanceNum:Number = 1, nServerIndex:Number = 0)		public function PointRollVideo(video:Video,advertiser:String) {			_videoObject = video;			_advertiserFolder = advertiser;			_isComplete = false;		}		public function startVideoPlay(baseName:String, lenInSecs:Number, instanceNum:Number, videoVolume:Number, hd:uint=NaN):void{			_baseStreamName = _baseFilePath = baseName;			_videoLenInSec = lenInSecs;			_videoInstanceNumber = instanceNum;			_initVolumeLevel = videoVolume;			﻿_prVideo = new PrVideo(_advertiserFolder, _baseFilePath, _baseStreamName, _videoLenInSec, _videoObject, _initVolumeLevel, _videoInstanceNumber); 			_prVideo.addEventListener(PrMediaEvent.COMPLETE, onVideoComplete);			_prVideo.addEventListener(PrMediaEvent.START, onVideoStart);			_prVideo.addEventListener(PrMediaEvent.PLAY, onVideoPlay);			_prVideo.addEventListener(PrMediaEvent.PAUSE, onVideoPause);			_prVideo.addEventListener(PrMediaEvent.STOP, onVideoStop);			_prVideo.addEventListener(PrMediaEvent.RESTART, onVideoRestart);			_prVideo.addEventListener(PrMediaEvent.REPLAY, onVideoReplay);			_prVideo.addEventListener(PrProgressEvent.PROGRESS, onVideoProgress); 			_prVideo.addEventListener(PrMediaEvent.BUFFER_EMPTY, onVideoBufferEmpty);			_prVideo.addEventListener(PrMediaEvent.BUFFER_FULL, onVideoBufferFull);			_prVideo.addEventListener(PrProgressEvent.OPTIONAL_MILESTONE, onOptionalMileStone);						_prVideo.startVideo(_deliveryType);					}		public function playVideo():void{			_prVideo.play();					}		public function pauseVideo():void{			_prVideo.pause();		}		public function killVideoStream():void{			if(_prVideo){			   _prVideo.killVideo();			}		}		public function replayVideo():void{			_prVideo.replay();		}		public function resetMileStones():void{			_prVideo.resetOptionalMilestones();		}		public function restartVideo(sound:Boolean = false):void{			_prVideo.restart(sound);		}		public function seekVideo(n:Number):void{			_prVideo.seek(n);		}		public function stopVideo():void{			_prVideo.stop();		}		public function resetMilestones():void{			_prVideo.resetOptionalMilestones();		}		public function restartWithAudio():void{			restartVideo();			_timeOut = setTimeout(setVideoVolume,150,1);		}		public function restartForcedVideo():void{			killVideoStream();			startVideoPlay(_baseFilePath, _videoLenInSec, _videoInstanceNumber,_initVolumeLevel);		}		private function setVideoVolume(n:Number):void{			videoVolume = n;		}				// Events		private function onOptionalMileStone(e:PrProgressEvent){			dispatchEvent(new PrProgressEvent(PrProgressEvent.OPTIONAL_MILESTONE));		}		private function onVideoStart(e:PrMediaEvent){			_isComplete = false;			dispatchEvent(new PrMediaEvent(PrMediaEvent.START));					}		private function onVideoStop(e:PrMediaEvent){			dispatchEvent(new PrMediaEvent(PrMediaEvent.STOP));					}		private function onVideoPause(e:PrMediaEvent){			dispatchEvent(new PrMediaEvent(PrMediaEvent.PAUSE));					}		private function onVideoPlay(e:PrMediaEvent){			dispatchEvent(new PrMediaEvent(PrMediaEvent.PLAY));					}		private function onVideoReplay(e:PrMediaEvent){			dispatchEvent(new PrMediaEvent(PrMediaEvent.REPLAY));					}		private function onVideoRestart(e:PrMediaEvent){			dispatchEvent(new PrMediaEvent(PrMediaEvent.RESTART));					}		private function onVideoComplete(e:PrMediaEvent){			_isComplete = true;			dispatchEvent(new PrMediaEvent(PrMediaEvent.COMPLETE));					}				private function onVideoBufferFull(e:PrMediaEvent){			dispatchEvent(new PrMediaEvent(PrMediaEvent.BUFFER_FULL));					}			private function onVideoBufferEmpty(e:PrMediaEvent){			dispatchEvent(new PrMediaEvent(PrMediaEvent.BUFFER_EMPTY));					}			private function onVideoProgress(e:PrProgressEvent){			//dispatchEvent(new PrProgressEvent(PrProgressEvent.OPTIONAL_MILESTONE));						//trace("\n e: " + e)			dispatchEvent(e);					}						// Getters & Setters		//function set videoBuffer(n:Number):void;		//function set videoForceBuffer(n:Number):void;		public function set videoBuffer(n:Number):void{			_prVideo.buffer = n;		}		public function set videoForceBuffer(n:Number):void{			_prVideo.forceBuffer = n;		}		public function set autoVideoKill(b:Boolean):void{			 _prVideo.autoKill = b;					}		public function set optionalMileStones(a:Array):void{			 _prVideo.optionalMilestones = a;				 		}		public function set trackVideoEvents(b:Boolean):void{			 _prVideo.trackEvents = b;					}		public function set videoVolume(n:Number):void{			 _initVolumeLevel = _prVideo.volume = n;					}		/*public function set killBorder(b:Boolean):void{			_prVideo.killBorder = b;	   		}*/		public function set deliveryType(n:Number):void{			switch(n){				case n:1					_deliveryType = PrVideo.STREAMING;					break;				case n:2					_deliveryType = PrVideo.PROGRESSIVE;					break;				default:					_deliveryType = PrVideo.STREAMING;					break;			}		}				public function get videoVolume():Number{		   return _initVolumeLevel;		}		public function get instance():PrVideo{			return _prVideo;		}		public function get isVideoPlaying():Boolean{			return _prVideo.isPlaying;		}		public function get isComplete():Boolean{			return _isComplete;		}	}	}