package com.pointroll.data{	import PointRollAPI_AS3.data.DataStorage;	import com.pointroll.interfaces.ISerializable;	import com.pointroll.interfaces.IPRDataStorage;	import flash.utils.Timer;	import flash.events.TimerEvent;	import com.pointroll.events.DataStorageEvents;		import flash.display.Sprite;		import com.pointroll.utils.Base64;	import flash.utils.ByteArray;	public class PRDataStorage extends Sprite implements IPRDataStorage,ISerializable {		private var _timer:Timer;		private var delay_n:Number;		private var count_n:Number;		public function PRDataStorage() {		}		public function checkAvailability(delay:Number,count:int):void {			delay_n = delay;			count_n = count;			_timer = new Timer(delay,count);			_timer.addEventListener("timer",onTimerEvent);		}		public function startTimer():void {			_timer.start();		}		public function dsAlertOnChange(name:String,frequency:Number,functionToCall:Function):void{			DataStorage.alertOnChange(name,frequency,functionToCall);		}		public function dsCheckOnInterval(name:String,frequency:Number,callFunction:Function):void{			DataStorage.checkOnInterval(name,frequency,callFunction);		}		public function stopAlert(name:String):void {			DataStorage.stopAlert(name);		}		public function serialize(a:Array):String {			var _length:int = a.length;			var _string:String = "";						for(var i:int = 0; i < _length; i++){				_string += a			}			return Base64.encode(_string);		}				public function deserialize(s:String):String{			var result:ByteArray =ByteArray( Base64.decode(s));			result.position = 0;			return result.readObject();		}				// GETTERS & SETTERS		public function getVariable(name:String):String {			return DataStorage.getVariable(name);		}		public function setVariable(name:String,value:String):void {			DataStorage.setVariable(name,value);		}		public function get dsAvailable():Boolean {			return DataStorage.available;		}		// EVENT		private function onTimerEvent(e:TimerEvent):void {			trace("Is DataStorage ready " + DataStorage.available + " count is " + _timer.currentCount);			if (DataStorage.available) {				dispatchEvent(new DataStorageEvents(DataStorageEvents.ON_DATA_STORAGE_LOAD,true));				_timer.stop();			}			if (_timer.currentCount == count_n) {				dispatchEvent(new DataStorageEvents(DataStorageEvents.ON_DATA_STORAGE_FAIL,false));			}		}	}}