package com.pointroll.data{	import com.pointroll.interfaces.IPRDataProvider;	import com.pointroll.interfaces.IPRDataParser;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;		import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.display.Sprite;		public class PRJSONLoader extends EventDispatcher implements IPRDataProvider{		private var _source:String;				private var _xml:XML;				private var _parser:IPRDataParser;				private var _xmlLoader:URLLoader;				public function PRJSONLoader(sourceData:String, iParser:IPRDataParser = null) {			_source = sourceData;			_parser = iParser;							_parser.addEventListener("onDataParsed",onDataParsed);			_parser.addEventListener("noDataFound",noDataFound);					}				public function getServiceData():void{			if(_parser){				_xmlLoader = new URLLoader();								_xmlLoader.addEventListener(Event.COMPLETE, onXMLLoadComplete);				_xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, onXMLLoadFail);								trace("Loading source: " + _source);				try{					_xmlLoader.load(new URLRequest(_source));				}catch(e:Error){					trace("XMLLOADER ERROR: " + e);				}finally{					dispatchEvent(new Event("noXMLLoaderFail"));				}							}			else{				throw new Error("A Parser needs to be set before getting data.");			}					}		public function getParsedData():*{			return _parser.getParseData();		}		public function getRawServiceData():*{			return _xml;		}				//GETTER & SETTERS		public function set dataSource(d:*):void{			if(_source is String){				_source = d;			}			else{				throw new Error("The data source must be a string");			}					}		public function set dataParser(p:IPRDataParser):void{			_parser = p;		}				public function get dataSource():*{			return _source;					}		public function get dataParser():IPRDataParser{			return _parser;		}				//Events		private function onXMLLoadComplete(e:Event):void{			trace("onXMLLoadComplete");			_xml = new XML(e.target.data);			_parser.parseData(_xml);		}		private function onXMLLoadFail(e:IOErrorEvent){			trace("onXMLLoadFail " + e);		}		private function onDataParsed(e:Event):void{			dispatchEvent(new Event("onDataParsed"));		}		private function noDataFound(e:Event):void{			trace("prxmlLoader noDataFound");			dispatchEvent(new Event("noDataFound"));		}	}	}/*		function getServiceData():void;		function getParsedData()*;		function getRawServiceData()*;				function set dataSource(d:*):void;		function set dataParser(p:IDataParser):void;		function get dataSource():*;		function get dataParser():IDataParser;	*/